{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","fastSpeeds","mySpeeds","stSpeeds","formatXAxis","tickItem","moment","format","getFiles","axios","get","then","response","_this","setState","data","this","interval","setInterval","react_default","a","createElement","className","es6","width","height","margin","top","right","left","bottom","dataKey","name","tickFormatter","type","stroke","label","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAiGeA,6MAvFbC,MAAQ,CACNC,WAAY,GACZC,SAAU,GACVC,SAAU,MAQTC,YAAc,SAACC,GACd,OAAOC,EAAOD,GAAUE,OAAO,cAGhCC,SAAW,SAACH,GAEXI,IAAMC,IAAI,mBACPC,KAAK,SAAAC,GACJC,EAAKC,SAAS,CACZb,WAAYW,EAASG,SAI3BN,IAAMC,IAAI,iBACPC,KAAK,SAAAC,GACJC,EAAKC,SAAS,CACZZ,SAAUU,EAASG,SAIzBN,IAAMC,IAAI,iBACPC,KAAK,SAAAC,GACJC,EAAKC,SAAS,CACZX,SAAUS,EAASG,6FA3BzBC,KAAKR,WACLQ,KAAKC,SAAWC,YAAYF,KAAKR,SAAU,sCAgC/C,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,4CACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,MAAO,IAAMC,OAAQ,IAAKV,KAAMC,KAAKhB,MAAMC,WACtDyB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/CX,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,QAAQ,OACbC,KAAK,OACLC,cAAejB,KAAKZ,cAEtBe,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACES,KAAK,mBAEPb,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMW,KAAK,WAAWH,QAAQ,WAAYI,OAAO,aAGjDhB,EAAAC,EAAAC,cAAA,kCACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,MAAO,IAAMC,OAAQ,IAAKV,KAAMC,KAAKhB,MAAME,SACtDwB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/CX,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,QAAQ,OACbC,KAAK,OACLC,cAAejB,KAAKZ,cAEtBe,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMW,KAAK,WAAWH,QAAQ,WAAWK,MAAM,WAAWD,OAAO,YACjEhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMW,KAAK,WAAWH,QAAQ,SAASK,MAAM,WAAWD,OAAO,aAG/DhB,EAAAC,EAAAC,cAAA,gCACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,MAAO,IAAMC,OAAQ,IAAKV,KAAMC,KAAKhB,MAAMG,SACtDuB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/CX,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,QAAQ,OACbC,KAAK,OACLC,cAAejB,KAAKZ,cAEtBe,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMW,KAAK,WAAWH,QAAQ,WAAWK,MAAM,WAAWD,OAAO,YACjEhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMW,KAAK,WAAWH,QAAQ,SAASK,MAAM,SAASD,OAAO,qBAjFrDE,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.77a5032c.chunk.js","sourcesContent":["import React from 'react';\nimport { LineChart, Line ,XAxis,YAxis,AreaChart, Area, Tooltip} from 'recharts';\nimport './App.css';\nimport * as moment from 'moment';\nimport axios from 'axios'\n\n\n\nclass App extends React.Component {\n\n  state = {\n    fastSpeeds :[],\n    mySpeeds :[],\n    stSpeeds :[]\n  }\n\n  componentDidMount(){\n      this.getFiles()\n      this.interval = setInterval(this.getFiles, 60000);\n    };\n\n     formatXAxis = (tickItem) =>{\n      return moment(tickItem).format(\"hh:mm a\");\n    }\n\n     getFiles = (tickItem) =>{\n\n      axios.get('fastspeeds.json')\n        .then(response => {\n          this.setState({\n            fastSpeeds: response.data\n            })\n          })\n\n      axios.get('myspeeds.json')\n        .then(response => {\n          this.setState({\n            mySpeeds: response.data\n            })\n        })\n\n      axios.get('stspeeds.json')\n        .then(response => {\n          this.setState({\n            stSpeeds: response.data\n            })\n        })\n    }\n\n    render() {\n  return (\n    <div className=\"App\">\n    <label> Fast speed test (netflix) </label>\n      <AreaChart width={1000} height={500} data={this.state.fastSpeeds}\n      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n      <XAxis dataKey=\"time\"\n        name=\"date\"\n        tickFormatter={this.formatXAxis}\n      />\n      <YAxis\n        name=\"Download(Mbps)\"\n      />\n      <Tooltip />\n      <Area type=\"monotone\" dataKey=\"download\"  stroke=\"#8884d8\" />\n      </AreaChart>\n\n      <label> MySpeed library </label>\n        <LineChart width={1000} height={500} data={this.state.mySpeeds}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <XAxis dataKey=\"time\"\n          name=\"date\"\n          tickFormatter={this.formatXAxis}\n        />\n        <YAxis/>\n        <Tooltip />\n        <Line type=\"monotone\" dataKey=\"download\" label=\"download\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"upload\" label=\"download\" stroke=\"#f4b642\" />\n        </LineChart>\n\n        <label> Speedtest.net </label>\n          <LineChart width={1000} height={500} data={this.state.stSpeeds}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <XAxis dataKey=\"time\"\n            name=\"date\"\n            tickFormatter={this.formatXAxis}\n          />\n          <YAxis/>\n          <Tooltip />\n          <Line type=\"monotone\" dataKey=\"download\" label=\"download\" stroke=\"#8884d8\" />\n          <Line type=\"monotone\" dataKey=\"upload\" label=\"upload\" stroke=\"#f4b642\" />\n          </LineChart>\n\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}